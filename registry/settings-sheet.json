{
  "name": "settings-sheet",
  "type": "registry:ui",
  "registryDependencies": [
    "sheet",
    "button",
    "input",
    "label",
    "separator",
    "badge",
    "switch"
  ],
  "dependencies": ["@solana/web3.js"],
  "devDependencies": [],
  "tailwind": { "config": {} },
  "cssVars": {},
  "files": [
    {
      "path": "settings-sheet.tsx",
      "content": "\"use client\";\n\nimport React from 'react';\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Settings, Globe, Key, Zap, RotateCcw } from 'lucide-react';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n\ninterface SettingsSheetProps {\n  // RPC Settings\n  rpcUrl?: string;\n  onRpcUrlChange?: (url: string) => void;\n  \n  // API Keys\n  heliusApiKey?: string;\n  onHeliusApiKeyChange?: (key: string) => void;\n  \n  // Advanced Settings\n  autoConnect?: boolean;\n  onAutoConnectChange?: (enabled: boolean) => void;\n  \n  commitment?: 'processed' | 'confirmed' | 'finalized';\n  onCommitmentChange?: (commitment: 'processed' | 'confirmed' | 'finalized') => void;\n  \n  // UI\n  trigger?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nconst DEFAULT_RPCS = {\n  [WalletAdapterNetwork.Mainnet]: clusterApiUrl(WalletAdapterNetwork.Mainnet),\n  [WalletAdapterNetwork.Testnet]: clusterApiUrl(WalletAdapterNetwork.Testnet),\n  [WalletAdapterNetwork.Devnet]: clusterApiUrl(WalletAdapterNetwork.Devnet),\n};\n\nexport function SettingsSheet({\n  rpcUrl = DEFAULT_RPCS[WalletAdapterNetwork.Devnet],\n  onRpcUrlChange,\n  heliusApiKey = '',\n  onHeliusApiKeyChange,\n  autoConnect = true,\n  onAutoConnectChange,\n  commitment = 'confirmed',\n  onCommitmentChange,\n  trigger,\n  open,\n  onOpenChange,\n}: SettingsSheetProps) {\n  const [localRpcUrl, setLocalRpcUrl] = React.useState(rpcUrl);\n  const [localHeliusKey, setLocalHeliusKey] = React.useState(heliusApiKey);\n  \n  const isCustomRpc = !Object.values(DEFAULT_RPCS).includes(rpcUrl);\n  \n  const handleRpcUrlChange = (url: string) => {\n    setLocalRpcUrl(url);\n    onRpcUrlChange?.(url);\n  };\n  \n  const handleHeliusKeyChange = (key: string) => {\n    setLocalHeliusKey(key);\n    onHeliusApiKeyChange?.(key);\n  };\n  \n  const resetToDefault = (network: WalletAdapterNetwork) => {\n    const defaultUrl = DEFAULT_RPCS[network];\n    handleRpcUrlChange(defaultUrl);\n  };\n\n  const defaultTrigger = (\n    <Button variant=\"outline\" size=\"sm\">\n      <Settings className=\"w-4 h-4 mr-2\" />\n      Settings\n    </Button>\n  );\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetTrigger asChild>\n        {trigger || defaultTrigger}\n      </SheetTrigger>\n      <SheetContent>\n        <SheetHeader>\n          <SheetTitle className=\"flex items-center gap-2\">\n            <Settings className=\"w-5 h-5\" />\n            Solana Settings\n          </SheetTitle>\n          <SheetDescription>\n            Configure your RPC endpoint, API keys, and connection preferences.\n          </SheetDescription>\n        </SheetHeader>\n        \n        <div className=\"space-y-6 mt-6\">\n          {/* RPC Configuration */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"flex items-center gap-2\">\n                <Globe className=\"w-4 h-4\" />\n                RPC Endpoint\n              </Label>\n              {isCustomRpc && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Custom\n                </Badge>\n              )}\n            </div>\n            <Input\n              value={localRpcUrl}\n              onChange={(e) => handleRpcUrlChange(e.target.value)}\n              placeholder=\"https://api.mainnet-beta.solana.com\"\n              className=\"font-mono text-sm\"\n            />\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => resetToDefault(WalletAdapterNetwork.Mainnet)}\n              >\n                Mainnet\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => resetToDefault(WalletAdapterNetwork.Testnet)}\n              >\n                Testnet\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => resetToDefault(WalletAdapterNetwork.Devnet)}\n              >\n                Devnet\n              </Button>\n            </div>\n          </div>\n          \n          <Separator />\n          \n          {/* API Keys */}\n          <div className=\"space-y-3\">\n            <Label className=\"flex items-center gap-2\">\n              <Key className=\"w-4 h-4\" />\n              Helius API Key\n            </Label>\n            <Input\n              type=\"password\"\n              value={localHeliusKey}\n              onChange={(e) => handleHeliusKeyChange(e.target.value)}\n              placeholder=\"Your Helius API key (optional)\"\n              className=\"font-mono text-sm\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Enables enhanced RPC features and higher rate limits.\n            </p>\n          </div>\n          \n          <Separator />\n          \n          {/* Connection Settings */}\n          <div className=\"space-y-4\">\n            <Label className=\"flex items-center gap-2\">\n              <Zap className=\"w-4 h-4\" />\n              Connection Settings\n            </Label>\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label htmlFor=\"auto-connect\">Auto Connect Wallet</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Automatically connect to previously used wallet\n                </p>\n              </div>\n              <Switch\n                id=\"auto-connect\"\n                checked={autoConnect}\n                onCheckedChange={onAutoConnectChange}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>Transaction Commitment</Label>\n              <div className=\"flex gap-2\">\n                {(['processed', 'confirmed', 'finalized'] as const).map((level) => (\n                  <Button\n                    key={level}\n                    variant={commitment === level ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => onCommitmentChange?.(level)}\n                    className=\"capitalize\"\n                  >\n                    {level}\n                  </Button>\n                ))}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {commitment === 'processed' && 'Fastest, but less secure'}\n                {commitment === 'confirmed' && 'Balanced speed and security'}\n                {commitment === 'finalized' && 'Most secure, but slower'}\n              </p>\n            </div>\n          </div>\n          \n          <Separator />\n          \n          {/* Reset */}\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <Label>Reset Settings</Label>\n              <p className=\"text-xs text-muted-foreground\">\n                Restore all settings to defaults\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                resetToDefault(WalletAdapterNetwork.Devnet);\n                handleHeliusKeyChange('');\n                onAutoConnectChange?.(true);\n                onCommitmentChange?.('confirmed');\n              }}\n            >\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Reset\n            </Button>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "use-solana-settings.ts",
      "content": "\"use client\";\n\nimport { useState, useCallback } from 'react';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n\ninterface SolanaSettings {\n  rpcUrl: string;\n  heliusApiKey: string;\n  autoConnect: boolean;\n  commitment: 'processed' | 'confirmed' | 'finalized';\n}\n\nconst DEFAULT_SETTINGS: SolanaSettings = {\n  rpcUrl: clusterApiUrl(WalletAdapterNetwork.Devnet),\n  heliusApiKey: '',\n  autoConnect: true,\n  commitment: 'confirmed',\n};\n\n// Helper to safely access localStorage\nconst getStoredSettings = (): Partial<SolanaSettings> => {\n  if (typeof window === 'undefined') return {};\n  \n  try {\n    const stored = localStorage.getItem('solana-settings');\n    return stored ? JSON.parse(stored) : {};\n  } catch {\n    return {};\n  }\n};\n\nconst storeSettings = (settings: SolanaSettings) => {\n  if (typeof window === 'undefined') return;\n  \n  try {\n    // Don't store sensitive API keys in localStorage by default\n    const { heliusApiKey, ...safeSettings } = settings;\n    localStorage.setItem('solana-settings', JSON.stringify(safeSettings));\n  } catch {\n    // Ignore storage errors\n  }\n};\n\nexport function useSolanaSettings(initialSettings?: Partial<SolanaSettings>) {\n  const [settings, setSettings] = useState<SolanaSettings>(() => {\n    const stored = getStoredSettings();\n    return {\n      ...DEFAULT_SETTINGS,\n      ...stored,\n      ...initialSettings,\n    };\n  });\n\n  const updateSettings = useCallback((updates: Partial<SolanaSettings>) => {\n    setSettings(prev => {\n      const newSettings = { ...prev, ...updates };\n      storeSettings(newSettings);\n      return newSettings;\n    });\n  }, []);\n\n  const updateRpcUrl = useCallback((rpcUrl: string) => {\n    updateSettings({ rpcUrl });\n  }, [updateSettings]);\n\n  const updateHeliusApiKey = useCallback((heliusApiKey: string) => {\n    updateSettings({ heliusApiKey });\n  }, [updateSettings]);\n\n  const updateAutoConnect = useCallback((autoConnect: boolean) => {\n    updateSettings({ autoConnect });\n  }, [updateSettings]);\n\n  const updateCommitment = useCallback((commitment: 'processed' | 'confirmed' | 'finalized') => {\n    updateSettings({ commitment });\n  }, [updateSettings]);\n\n  const resetSettings = useCallback(() => {\n    setSettings(DEFAULT_SETTINGS);\n    storeSettings(DEFAULT_SETTINGS);\n  }, []);\n\n  // Computed values\n  const isCustomRpc = ![\n    clusterApiUrl(WalletAdapterNetwork.Mainnet),\n    clusterApiUrl(WalletAdapterNetwork.Testnet),\n    clusterApiUrl(WalletAdapterNetwork.Devnet),\n  ].includes(settings.rpcUrl);\n\n  const hasHeliusKey = Boolean(settings.heliusApiKey);\n\n  return {\n    // Settings values\n    ...settings,\n    \n    // Update functions\n    updateRpcUrl,\n    updateHeliusApiKey,\n    updateAutoConnect,\n    updateCommitment,\n    updateSettings,\n    resetSettings,\n    \n    // Computed values\n    isCustomRpc,\n    hasHeliusKey,\n  };\n}",
      "type": "registry:hook"
    }
  ]
}
