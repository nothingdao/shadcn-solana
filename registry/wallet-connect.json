{
  "name": "wallet-connect",
  "type": "registry:ui",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-base",
    "@solana/wallet-adapter-react",
    "@solana/wallet-adapter-wallets",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "dropdown-menu",
    "dialog",
    "scroll-area",
    "avatar",
    "badge"
  ],
  "files": [
    {
      "name": "wallet-provider.tsx",
      "type": "registry:component",
      "path": "components/solana/wallet-provider.tsx",
      "content": "\"use client\";\n\nimport React, { useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  BackpackWalletAdapter,\n  GlowWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n\ninterface SolanaWalletProviderProps {\n  children: React.ReactNode;\n  network?: WalletAdapterNetwork;\n  endpoint?: string;\n  autoConnect?: boolean;\n}\n\nexport function SolanaWalletProvider({\n  children,\n  network = WalletAdapterNetwork.Devnet,\n  endpoint,\n  autoConnect = true,\n}: SolanaWalletProviderProps) {\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter(),\n      new BackpackWalletAdapter(),\n      new GlowWalletAdapter(),\n    ],\n    []\n  );\n\n  const connectionEndpoint = useMemo(\n    () => endpoint || clusterApiUrl(network),\n    [network, endpoint]\n  );\n\n  return (\n    <ConnectionProvider endpoint={connectionEndpoint}>\n      <WalletProvider wallets={wallets} autoConnect={autoConnect}>\n        {children}\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}",
      "target": ""
    },
    {
      "name": "wallet-connect-button.tsx",
      "type": "registry:component",
      "path": "components/solana/wallet-connect-button.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Copy, LogOut, Wallet, ChevronDown } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { WalletSelectModal } from './wallet-select-modal';\n\ninterface WalletConnectButtonProps {\n  className?: string;\n}\n\nexport function WalletConnectButton({ className }: WalletConnectButtonProps) {\n  const { publicKey, disconnect, wallet, connect, connecting, connected } = useWallet();\n  const [showWalletSelect, setShowWalletSelect] = useState(false);\n\n  const copyAddress = async () => {\n    if (publicKey) {\n      await navigator.clipboard.writeText(publicKey.toBase58());\n      toast.success('Address copied to clipboard');\n    }\n  };\n\n  const handleConnect = async () => {\n    if (wallet) {\n      try {\n        await connect();\n      } catch (error) {\n        toast.error('Failed to connect wallet');\n      }\n    } else {\n      setShowWalletSelect(true);\n    }\n  };\n\n  if (!connected && !connecting) {\n    return (\n      <>\n        <Button \n          onClick={handleConnect}\n          disabled={connecting}\n          className={className}\n        >\n          <Wallet className=\"w-4 h-4 mr-2\" />\n          {wallet ? 'Connect' : 'Select Wallet'}\n        </Button>\n        <WalletSelectModal \n          open={showWalletSelect} \n          onOpenChange={setShowWalletSelect}\n        />\n      </>\n    );\n  }\n\n  if (connecting) {\n    return (\n      <Button disabled className={className}>\n        <div className=\"w-4 h-4 mr-2 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n        Connecting...\n      </Button>\n    );\n  }\n\n  if (connected && publicKey) {\n    const truncatedAddress = `${publicKey.toBase58().slice(0, 4)}...${publicKey.toBase58().slice(-4)}`;\n\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className={`${className} flex items-center gap-2`}>\n            <Avatar className=\"w-6 h-6\">\n              <AvatarImage src={wallet?.adapter.icon} alt={wallet?.adapter.name} />\n              <AvatarFallback>\n                <Wallet className=\"w-3 h-3\" />\n              </AvatarFallback>\n            </Avatar>\n            <span className=\"font-mono\">{truncatedAddress}</span>\n            <ChevronDown className=\"w-4 h-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-64\">\n          <div className=\"px-2 py-1.5\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarImage src={wallet?.adapter.icon} alt={wallet?.adapter.name} />\n                <AvatarFallback>\n                  <Wallet className=\"w-4 h-4\" />\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"font-medium\">{wallet?.adapter.name}</p>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Connected\n                </Badge>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground font-mono break-all\">\n              {publicKey.toBase58()}\n            </p>\n          </div>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={copyAddress}>\n            <Copy className=\"w-4 h-4 mr-2\" />\n            Copy Address\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setShowWalletSelect(true)}>\n            <Wallet className=\"w-4 h-4 mr-2\" />\n            Change Wallet\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={disconnect} className=\"text-destructive\">\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Disconnect\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n\n  return null;\n}",
      "target": ""
    },
    {
      "name": "wallet-select-modal.tsx",
      "type": "registry:component",
      "path": "components/solana/wallet-select-modal.tsx",
      "content": "\"use client\";\n\nimport React from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ExternalLink, Wallet } from 'lucide-react';\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nimport { toast } from 'sonner';\n\ninterface WalletSelectModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function WalletSelectModal({ open, onOpenChange }: WalletSelectModalProps) {\n  const { wallets, select, connect } = useWallet();\n\n  const handleWalletSelect = async (walletName: string) => {\n    try {\n      select(walletName);\n      await connect();\n      onOpenChange(false);\n    } catch (error) {\n      toast.error('Failed to connect to wallet');\n    }\n  };\n\n  const installedWallets = wallets.filter(\n    (wallet) => wallet.readyState === WalletReadyState.Installed\n  );\n  \n  const notDetectedWallets = wallets.filter(\n    (wallet) => wallet.readyState === WalletReadyState.NotDetected\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"w-5 h-5\" />\n            Connect Wallet\n          </DialogTitle>\n          <DialogDescription>\n            Choose a wallet to connect to this application.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <ScrollArea className=\"max-h-[400px]\">\n          <div className=\"space-y-2\">\n            {installedWallets.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-muted-foreground\">Installed Wallets</h4>\n                {installedWallets.map((wallet) => (\n                  <Button\n                    key={wallet.adapter.name}\n                    variant=\"outline\"\n                    className=\"w-full justify-start h-auto p-4\"\n                    onClick={() => handleWalletSelect(wallet.adapter.name)}\n                  >\n                    <Avatar className=\"w-8 h-8 mr-3\">\n                      <AvatarImage src={wallet.adapter.icon} alt={wallet.adapter.name} />\n                      <AvatarFallback>\n                        <Wallet className=\"w-4 h-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 text-left\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{wallet.adapter.name}</span>\n                        <Badge variant=\"default\" className=\"text-xs\">Installed</Badge>\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            )}\n            \n            {notDetectedWallets.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-muted-foreground\">Available Wallets</h4>\n                {notDetectedWallets.map((wallet) => (\n                  <div\n                    key={wallet.adapter.name}\n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center\">\n                      <Avatar className=\"w-8 h-8 mr-3\">\n                        <AvatarImage src={wallet.adapter.icon} alt={wallet.adapter.name} />\n                        <AvatarFallback>\n                          <Wallet className=\"w-4 h-4\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"font-medium\">{wallet.adapter.name}</span>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.open(wallet.adapter.url, '_blank')}\n                    >\n                      <ExternalLink className=\"w-4 h-4 mr-1\" />\n                      Install\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}",
      "target": ""
    }
  ]
}
