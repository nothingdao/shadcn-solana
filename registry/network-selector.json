{
  "name": "network-selector",
  "type": "registry:ui",
  "registryDependencies": ["select", "badge"],
  "dependencies": ["@solana/web3.js", "@solana/wallet-adapter-react"],
  "devDependencies": [],
  "tailwind": { "config": {} },
  "cssVars": {},
  "files": [
    {
      "path": "network-selector.tsx",
      "content": "\"use client\";\n\nimport React from 'react';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { Globe, Zap, TestTube, Wrench } from 'lucide-react';\n\ninterface NetworkSelectorProps {\n  value?: WalletAdapterNetwork;\n  onValueChange?: (network: WalletAdapterNetwork) => void;\n  className?: string;\n  showBadge?: boolean;\n}\n\nconst NETWORKS = [\n  {\n    value: WalletAdapterNetwork.Mainnet,\n    label: 'Mainnet Beta',\n    description: 'Production network',\n    icon: Globe,\n    color: 'default' as const,\n    endpoint: clusterApiUrl(WalletAdapterNetwork.Mainnet)\n  },\n  {\n    value: WalletAdapterNetwork.Testnet,\n    label: 'Testnet',\n    description: 'Test network',\n    icon: TestTube,\n    color: 'secondary' as const,\n    endpoint: clusterApiUrl(WalletAdapterNetwork.Testnet)\n  },\n  {\n    value: WalletAdapterNetwork.Devnet,\n    label: 'Devnet',\n    description: 'Development network',\n    icon: Wrench,\n    color: 'outline' as const,\n    endpoint: clusterApiUrl(WalletAdapterNetwork.Devnet)\n  }\n];\n\nexport function NetworkSelector({\n  value = WalletAdapterNetwork.Devnet,\n  onValueChange,\n  className,\n  showBadge = true\n}: NetworkSelectorProps) {\n  const currentNetwork = NETWORKS.find(network => network.value === value) || NETWORKS[2];\n  const CurrentIcon = currentNetwork.icon;\n\n  return (\n    <div className={`flex items-center gap-2 ${className}`}>\n      <Select\n        value={value}\n        onValueChange={(newValue) => {\n          onValueChange?.(newValue as WalletAdapterNetwork);\n        }}\n      >\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue>\n            <div className=\"flex items-center gap-2\">\n              <CurrentIcon className=\"w-4 h-4\" />\n              {currentNetwork.label}\n            </div>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {NETWORKS.map((network) => {\n            const Icon = network.icon;\n            return (\n              <SelectItem key={network.value} value={network.value}>\n                <div className=\"flex items-center gap-2\">\n                  <Icon className=\"w-4 h-4\" />\n                  <div>\n                    <div className=\"font-medium\">{network.label}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {network.description}\n                    </div>\n                  </div>\n                </div>\n              </SelectItem>\n            );\n          })}\n        </SelectContent>\n      </Select>\n      \n      {showBadge && (\n        <Badge variant={currentNetwork.color}>\n          {currentNetwork.label}\n        </Badge>\n      )}\n    </div>\n  );\n}\n\n// Hook for managing network state\nexport function useNetwork(initialNetwork: WalletAdapterNetwork = WalletAdapterNetwork.Devnet) {\n  const [network, setNetwork] = React.useState<WalletAdapterNetwork>(initialNetwork);\n  \n  const networkConfig = NETWORKS.find(n => n.value === network) || NETWORKS[2];\n  \n  return {\n    network,\n    setNetwork,\n    endpoint: networkConfig.endpoint,\n    networkConfig\n  };\n}",
      "type": "registry:component"
    },
    {
      "path": "use-network.ts",
      "content": "\"use client\";\n\nimport { useState } from 'react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { clusterApiUrl } from '@solana/web3.js';\n\nexport function useNetwork(initialNetwork: WalletAdapterNetwork = WalletAdapterNetwork.Devnet) {\n  const [network, setNetwork] = useState<WalletAdapterNetwork>(initialNetwork);\n  \n  const endpoint = clusterApiUrl(network);\n  \n  const isMainnet = network === WalletAdapterNetwork.Mainnet;\n  const isTestnet = network === WalletAdapterNetwork.Testnet; \n  const isDevnet = network === WalletAdapterNetwork.Devnet;\n  \n  return {\n    network,\n    setNetwork,\n    endpoint,\n    isMainnet,\n    isTestnet,\n    isDevnet\n  };\n}",
      "type": "registry:hook"
    }
  ]
}
